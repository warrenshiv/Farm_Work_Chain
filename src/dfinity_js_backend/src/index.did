service: () -> {
    acceptContract: (text, text) -> (variant {Ok:record {status:text; workerId:opt text; duration:text; farmerId:text; jobDescription:text; jobTerms:text; jobOfferId:text; wages:nat64; contractId:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    completeJobPay: (principal, text, nat64, nat64, nat64) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; memo:nat64; price:nat64; worker:principal; paid_at_block:opt nat64; ContractId:text; farmer:principal}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createContract: (record {duration:text; farmerId:text; jobDescription:text; jobTerms:text; jobOfferId:text; wages:nat64}) -> (variant {Ok:record {status:text; workerId:opt text; duration:text; farmerId:text; jobDescription:text; jobTerms:text; jobOfferId:text; wages:nat64; contractId:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createFarmManagerProfile: (record {name:text; contactNo:text; location:text}) -> (variant {Ok:record {owner:principal; name:text; farmManagerId:text; contactNo:text; location:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createFarmerProfile: (record {farmSize:nat64; name:text; contactNo:text; location:text}) -> (variant {Ok:record {verified:bool; farmSize:nat64; farmerId:text; owner:principal; name:text; contactNo:text; rating:nat64; location:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createJobOffer: (record {duration:text; farmerId:text; jobDescription:text; jobTitle:text}) -> (variant {Ok:record {status:text; duration:text; farmerId:text; jobDescription:text; jobTitle:text; jobOfferId:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createReserveJobPay: (text) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; memo:nat64; price:nat64; worker:principal; paid_at_block:opt nat64; ContractId:text; farmer:principal}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createWorkerProfile: (record {name:text; experience:text; address:text; contactNo:text}) -> (variant {Ok:record {earnedPoints:nat64; references:vec text; workerId:text; verified:bool; owner:principal; name:text; experience:text; address:text; contactNo:text; skills:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    deleteContract: (text) -> (variant {Ok:record {status:text; workerId:opt text; duration:text; farmerId:text; jobDescription:text; jobTerms:text; jobOfferId:text; wages:nat64; contractId:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    deleteFarmerProfile: (text) -> (variant {Ok:record {verified:bool; farmSize:nat64; farmerId:text; owner:principal; name:text; contactNo:text; rating:nat64; location:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    deleteJobOffer: (text) -> (variant {Ok:record {status:text; duration:text; farmerId:text; jobDescription:text; jobTitle:text; jobOfferId:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    deleteWorkerProfile: (text) -> (variant {Ok:record {earnedPoints:nat64; references:vec text; workerId:text; verified:bool; owner:principal; name:text; experience:text; address:text; contactNo:text; skills:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    getAcceptedContracts: () -> (vec record {status:text; workerId:opt text; duration:text; farmerId:text; jobDescription:text; jobTerms:text; jobOfferId:text; wages:nat64; contractId:text}) query;
    getAddressFromPrincipal: (principal) -> (text) query;
    getAllContracts: () -> (vec record {status:text; workerId:opt text; duration:text; farmerId:text; jobDescription:text; jobTerms:text; jobOfferId:text; wages:nat64; contractId:text}) query;
    getAllFarmerProfiles: () -> (vec record {verified:bool; farmSize:nat64; farmerId:text; owner:principal; name:text; contactNo:text; rating:nat64; location:text}) query;
    getAllJobOffers: () -> (vec record {status:text; duration:text; farmerId:text; jobDescription:text; jobTitle:text; jobOfferId:text}) query;
    getAllWorkerProfiles: () -> (vec record {earnedPoints:nat64; references:vec text; workerId:text; verified:bool; owner:principal; name:text; experience:text; address:text; contactNo:text; skills:vec text}) query;
    getCompletedContracts: () -> (vec record {status:text; workerId:opt text; duration:text; farmerId:text; jobDescription:text; jobTerms:text; jobOfferId:text; wages:nat64; contractId:text}) query;
    getContract: (text) -> (variant {Ok:record {status:text; workerId:opt text; duration:text; farmerId:text; jobDescription:text; jobTerms:text; jobOfferId:text; wages:nat64; contractId:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getContractAssignedToWorker: (text) -> (variant {Ok:record {status:text; workerId:opt text; duration:text; farmerId:text; jobDescription:text; jobTerms:text; jobOfferId:text; wages:nat64; contractId:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getFarmManagerByOwner: () -> (variant {Ok:record {owner:principal; name:text; farmManagerId:text; contactNo:text; location:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getFarmerByOwner: () -> (variant {Ok:record {verified:bool; farmSize:nat64; farmerId:text; owner:principal; name:text; contactNo:text; rating:nat64; location:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getFarmerProfile: (text) -> (variant {Ok:record {verified:bool; farmSize:nat64; farmerId:text; owner:principal; name:text; contactNo:text; rating:nat64; location:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getJobOffer: (text) -> (variant {Ok:record {status:text; duration:text; farmerId:text; jobDescription:text; jobTitle:text; jobOfferId:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getWorkerByOwner: () -> (variant {Ok:record {earnedPoints:nat64; references:vec text; workerId:text; verified:bool; owner:principal; name:text; experience:text; address:text; contactNo:text; skills:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getWorkerProfile: (text) -> (variant {Ok:record {earnedPoints:nat64; references:vec text; workerId:text; verified:bool; owner:principal; name:text; experience:text; address:text; contactNo:text; skills:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    insertReference: (text, text) -> (variant {Ok:record {earnedPoints:nat64; references:vec text; workerId:text; verified:bool; owner:principal; name:text; experience:text; address:text; contactNo:text; skills:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    insertSkill: (text, text) -> (variant {Ok:record {earnedPoints:nat64; references:vec text; workerId:text; verified:bool; owner:principal; name:text; experience:text; address:text; contactNo:text; skills:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateContract: (text, record {duration:text; farmerId:text; jobDescription:text; jobTerms:text; jobOfferId:text; wages:nat64}) -> (variant {Ok:record {status:text; workerId:opt text; duration:text; farmerId:text; jobDescription:text; jobTerms:text; jobOfferId:text; wages:nat64; contractId:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateFarmerProfile: (text, record {farmSize:nat64; name:text; contactNo:text; location:text}) -> (variant {Ok:record {verified:bool; farmSize:nat64; farmerId:text; owner:principal; name:text; contactNo:text; rating:nat64; location:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateJobOffer: (text, record {duration:text; farmerId:text; jobDescription:text; jobTitle:text}) -> (variant {Ok:record {status:text; duration:text; farmerId:text; jobDescription:text; jobTitle:text; jobOfferId:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateWorkerProfile: (text, record {name:text; experience:text; address:text; contactNo:text}) -> (variant {Ok:record {earnedPoints:nat64; references:vec text; workerId:text; verified:bool; owner:principal; name:text; experience:text; address:text; contactNo:text; skills:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    verifyPayment: (principal, nat64, nat64, nat64) -> (bool) query;
    verifyWorker: (text) -> (variant {Ok:record {earnedPoints:nat64; references:vec text; workerId:text; verified:bool; owner:principal; name:text; experience:text; address:text; contactNo:text; skills:vec text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
}
